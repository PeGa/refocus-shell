#!/usr/bin/env bash
# Refocus Shell Nudge - A privacy-first, FLOSS productivity tool
# Copyright (C) 2025 Pablo Gonzalez
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Refocus Shell Nudge Script
# This script is executed by cron to send periodic notifications

# Configuration
REFOCUS_DB="$HOME/.local/refocus/refocus.db"
REFOCUS_CONFIG="$HOME/.local/refocus/config.sh"

# Load configuration if it exists
if [[ -f "$REFOCUS_CONFIG" ]]; then
    source "$REFOCUS_CONFIG"
else
    # Default values
    REFOCUS_NUDGE_INTERVAL=10
    REFOCUS_LOG_FACILITY="user"
    REFOCUS_LOG_PRIORITY="notice"
fi

# Function to log messages
log_message() {
    local message="$1"
    logger -p "$REFOCUS_LOG_FACILITY.$REFOCUS_LOG_PRIORITY" "focus-nudge: $message"
}

# Function to send notification
send_notification() {
    local title="$1"
    local message="$2"
    
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "$title" "$message"
        log_message "notification sent: $title - $message"
    else
        log_message "error: notify-send not available"
        return 1
    fi
}

# Check if refocus shell is disabled
check_focus_disabled() {
    if [[ ! -f "$REFOCUS_DB" ]]; then
        log_message "database not found"
        return 1
    fi
    
    local focus_disabled
    focus_disabled=$(sqlite3 "$REFOCUS_DB" "SELECT focus_disabled FROM state WHERE id = 1;" 2>/dev/null)
    
    if [[ "$focus_disabled" -eq 1 ]]; then
        log_message "refocus shell is disabled"
        return 1
    fi
    
    return 0
}

# Check if nudging is enabled
check_nudging_enabled() {
    if [[ ! -f "$REFOCUS_DB" ]]; then
        return 1
    fi
    
    local nudging_enabled
    nudging_enabled=$(sqlite3 "$REFOCUS_DB" "SELECT nudging_enabled FROM state WHERE id = 1;" 2>/dev/null)
    
    if [[ "$nudging_enabled" -eq 0 ]]; then
        log_message "nudging is disabled"
        return 1
    fi
    
    return 0
}

# Get current focus status
get_focus_status() {
    if [[ ! -f "$REFOCUS_DB" ]]; then
        return 1
    fi
    
    local state
    state=$(sqlite3 "$REFOCUS_DB" "SELECT active, project, start_time, paused, pause_notes FROM state WHERE id = 1;" 2>/dev/null)
    
    if [[ -z "$state" ]]; then
        log_message "error: could not get focus status"
        return 1
    fi
    
    IFS='|' read -r active project start_time paused pause_notes <<< "$state"
    
    if [[ "$active" -eq 1 ]] && [[ -n "$project" ]]; then
        # Calculate elapsed time
        local now=$(date +%s)
        local start_ts=$(date --date="$start_time" +%s 2>/dev/null)
        
        if [[ -n "$start_ts" ]]; then
            local elapsed=$((now - start_ts))
            local minutes=$((elapsed / 60))
            
            # Round to nearest 10-minute interval for clean notification display
            # This ensures notifications show 10m, 20m, 30m, etc. instead of random times
            local rounded_minutes=$(( (minutes + 5) / 10 * 10 ))
            
            # Ensure minimum of 10 minutes
            if [[ $rounded_minutes -lt 10 ]]; then
                rounded_minutes=10
            fi
            
            echo "active|$project|$rounded_minutes"
        else
            echo "active|$project|10"
        fi
    elif [[ "$paused" -eq 1 ]] && [[ -n "$project" ]]; then
        echo "paused|$project|$pause_notes"
    else
        echo "inactive"
    fi
}

# Main function
main() {
    log_message "nudge script started"
    
    # Check if refocus shell is disabled
    if ! check_focus_disabled; then
        exit 0
    fi
    
    # Check if nudging is enabled
    if ! check_nudging_enabled; then
        exit 0
    fi
    
    # Get current focus status
    local status
    status=$(get_focus_status)
    
    if [[ $? -ne 0 ]]; then
        log_message "error: could not get focus status"
        exit 1
    fi
    
    # Send appropriate notification
    if [[ "$status" == "inactive" ]]; then
        # Don't send notifications when there's no active session
        # Just log that we checked and found no active session
        log_message "no active focus session found, no notification needed"
    elif [[ "$status" == "paused"* ]]; then
        IFS='|' read -r state project pause_notes <<< "$status"
        if [[ "$state" == "paused" ]]; then
            local message="Session paused: $project"
            if [[ -n "$pause_notes" ]]; then
                message="$message - $pause_notes"
            fi
            send_notification "Focus Paused" "$message"
            log_message "paused session notification sent for project: $project"
        fi
    else
        IFS='|' read -r state project minutes <<< "$status"
        if [[ "$state" == "active" ]]; then
            if send_notification "Focus Reminder" "You're focusing on: $project (${minutes}m elapsed)"; then
                log_message "active notification sent successfully for project: $project"
            else
                log_message "error: failed to send active notification for project: $project"
            fi
        fi
    fi
    
    log_message "nudge script completed successfully"
}

# Run main function
main "$@" 